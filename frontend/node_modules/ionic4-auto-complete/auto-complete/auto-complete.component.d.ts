import { DoCheck, EventEmitter, TemplateRef, AfterViewChecked } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { AutoCompleteOptions } from '../auto-complete-options.model';
import { AutoCompleteService } from '../auto-complete.service';
import { AutoCompleteStyles } from '../auto-complete-styles.model';
export declare class AutoCompleteComponent implements AfterViewChecked, ControlValueAccessor, DoCheck {
    autocompleteOptions: AutoCompleteOptions;
    defaultOpts: AutoCompleteOptions;
    hasFocus: boolean;
    isLoading: boolean;
    focusedOption: number;
    formValue: any;
    promise: any;
    selected: any | any[];
    selection: any;
    showSuggestions: boolean;
    suggestions: any[];
    private onTouchedCallback;
    private onChangeCallback;
    private showListChanged;
    alwaysShowList: boolean;
    autocomplete: string;
    autoFocusSuggestion: boolean;
    clearInvalidInput: boolean;
    disabled: boolean;
    emptyTemplate: TemplateRef<any>;
    exclude: any[];
    frontIcon: false | string;
    hideListOnSelection: boolean;
    keyword: string;
    label: string;
    labelPosition: string;
    listTemplate: TemplateRef<any>;
    location: string;
    maxResults: number;
    maxSelected: number;
    multi: boolean;
    name: string;
    provider: AutoCompleteService | Function;
    removeButtonClasses: string;
    removeButtonColor: string;
    removeButtonIcon: string | false;
    removeButtonSlot: string;
    removeDuplicateSuggestions: boolean;
    selectionTemplate: TemplateRef<any>;
    selectOnTabOut: boolean;
    showResultsFirst: boolean;
    styles: AutoCompleteStyles;
    template: TemplateRef<any>;
    useIonInput: boolean;
    autoFocus: EventEmitter<any>;
    autoBlur: EventEmitter<any>;
    blur: EventEmitter<any>;
    focus: EventEmitter<any>;
    ionAutoInput: EventEmitter<string>;
    itemsChange: EventEmitter<any>;
    itemsCleared: EventEmitter<boolean>;
    itemsHidden: EventEmitter<any>;
    itemRemoved: EventEmitter<any>;
    itemSelected: EventEmitter<any>;
    itemsShown: EventEmitter<any>;
    modelChange: EventEmitter<any | any[]>;
    private searchbarElem;
    private inputElem;
    private itemList;
    set dataProvider(provider: AutoCompleteService | Function);
    set eager(eager: boolean);
    set options(options: AutoCompleteOptions | any);
    get model(): any | any[];
    set model(selected: any | any[]);
    get showList(): boolean;
    set showList(value: boolean);
    /**
     * Handle document click
     *
     * @param event
     *
     * @private
     */
    documentClickHandler(event: Event): void;
    /**
     * Create a new instance
     */
    constructor();
    ngAfterViewChecked(): void;
    ngDoCheck(): void;
    /**
     * Get element's position on screen
     *
     * @param el
     *
     * @private
     */
    private _getPosition;
    private isEventWithinElement;
    /**
     * Get value from form
     *
     * @param selection
     *
     * @private
     */
    getFormValue(selection: any): any;
    clickClear(): void;
    /**
     * Clear current input value
     */
    clearValue(): void;
    /**
     * Get items for auto-complete
     *
     * @param event
     * @param show
     */
    getItems(event?: any, show?: boolean): void;
    /**
     * Get an item's label
     *
     * @param selection
     */
    getLabel(selection: any | any[]): string;
    /**
     * Get menu style
     */
    listStyles(): any;
    private listLocationStyles;
    /**
     * Handles tab key press.
     * If `selectOnTabOut` is `true`, will select currently focused item
     *
     * @param event
     */
    handleTabOut(event: any): void;
    /**
     * Handle tap
     *
     * @param event
     */
    handleTap(event: any): void;
    /**
     * Handle tap when selecting an item
     *
     * @param $event
     * @param suggestion
     */
    handleSelectTap($event: any, suggestion?: any): false;
    /**
     * Hide item list
     */
    hideItemList(): void;
    highlightItem(direction: number): void;
    /**
     * Fired when the input focused
     */
    onFocus(event: any): void;
    /**
     * Fired when the input focused
     */
    onBlur(event: any): void;
    _reflectName(event: any): any;
    /**
     * Register onChangeCallback
     *
     * @param fn
     */
    registerOnChange(fn: Function | false): void;
    /**
     * Register onTouchedCallback
     *
     * @param fn
     */
    registerOnTouched(fn: Function | false): void;
    /**
     * Remove already selected suggestions
     *
     * @param suggestions
     */
    removeDuplicates(suggestions: any[]): any[];
    removeExcluded(suggestions: any[]): any[];
    /**
     * Remove item from selected
     *
     * @param selection
     * @param notify?
     */
    removeItem(selection: any, notify?: boolean): void;
    /**
     * Select item from list
     *
     * @param selection
     **/
    selectItem(selection: any): void;
    /**
     * Set focus of searchbar
     */
    setFocus(): void;
    /**
     * Set suggestions
     *
     * @param suggestions
     * @param show
     */
    setSuggestions(suggestions: any[], show?: boolean): void;
    /**
     * Set current input value
     *
     * Used externally (ie don't delete)
     *
     * @param selection
     */
    setValue(selection: any): void;
    /**
     * Show item list
     */
    showItemList(): void;
    /**
     * Update the model
     */
    updateModel(enteredText: string): void;
    /**
     * Write value
     *
     * @param value
     */
    writeValue(value: any): void;
}
