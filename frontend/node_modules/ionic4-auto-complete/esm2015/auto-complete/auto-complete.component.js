import { Component, Input, Output, EventEmitter, TemplateRef, ViewChild, HostListener, ElementRef, ViewContainerRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { from, Observable, Subject } from 'rxjs';
import { finalize } from 'rxjs/operators';
import { AutoCompleteOptions } from '../auto-complete-options.model';
import { AutoCompleteStyles } from '../auto-complete-styles.model';
export class AutoCompleteComponent {
    /**
     * Create a new instance
     */
    constructor() {
        this.autocompleteOptions = new AutoCompleteOptions();
        this.hasFocus = false;
        this.isLoading = false;
        this.focusedOption = -1;
        this.showSuggestions = false;
        this.onTouchedCallback = false;
        this.onChangeCallback = false;
        this.showListChanged = false;
        this.alwaysShowList = false;
        this.autoFocusSuggestion = true;
        this.clearInvalidInput = true;
        this.disabled = false;
        this.exclude = [];
        this.frontIcon = false;
        this.hideListOnSelection = true;
        this.label = '';
        this.labelPosition = 'fixed';
        this.location = 'auto';
        this.maxResults = 8;
        this.maxSelected = null;
        this.multi = false;
        this.name = '';
        this.removeButtonClasses = '';
        this.removeButtonColor = 'primary';
        this.removeButtonIcon = 'close-circle';
        this.removeButtonSlot = 'end';
        this.removeDuplicateSuggestions = true;
        this.selectOnTabOut = true;
        this.styles = new AutoCompleteStyles;
        this.useIonInput = false;
        this.autoBlur = new EventEmitter();
        this.autoFocus = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.ionAutoInput = new EventEmitter();
        this.itemsChange = new EventEmitter();
        this.itemsCleared = new EventEmitter();
        this.itemsHidden = new EventEmitter();
        this.itemRemoved = new EventEmitter();
        this.itemSelected = new EventEmitter();
        this.itemsShown = new EventEmitter();
        this.modelChange = new EventEmitter();
        this.keyword = '';
        this.suggestions = [];
    }
    set dataProvider(provider) {
        if (typeof provider !== 'undefined') {
            this.provider = provider;
            if (typeof this.selected !== 'undefined') {
                this.keyword = this.getLabel(this.selected);
            }
        }
    }
    set eager(eager) {
        if (eager) {
            this.getItems(null, false);
        }
    }
    set options(options) {
        this.autocompleteOptions = new AutoCompleteOptions();
        const keys = Object.keys(options);
        const keysLength = keys.length;
        for (let i = 0; i < keysLength; i++) {
            const key = keys[i];
            if (typeof options[key] !== 'undefined') {
                this.autocompleteOptions[key] = options[key];
            }
        }
        if (typeof this.selected === 'undefined') {
            if (typeof this.autocompleteOptions.value !== 'undefined') {
                this.selected = this.autocompleteOptions.value;
            }
            else {
                if (this.multi) {
                    this.selected = [];
                }
                else {
                    this.selected = null;
                }
            }
            this.keyword = this.getLabel(this.selected);
        }
        if (this.autocompleteOptions.autocomplete) {
            this.autocomplete = this.autocompleteOptions.autocomplete;
        }
        else {
            this.autocomplete = 'off';
        }
    }
    get model() {
        let model = this.selected;
        if (!this.multi && typeof this.selected.length !== 'undefined') {
            if (this.selected.length === 0) {
                model = null;
            }
            else {
                model = this.selected[0];
            }
        }
        return model;
    }
    set model(selected) {
        this.selected = selected;
    }
    get showList() {
        return this.showSuggestions;
    }
    set showList(value) {
        if (typeof value === 'undefined') {
            return;
        }
        if (this.showSuggestions === value) {
            return;
        }
        this.showSuggestions = value === true;
        this.showListChanged = true;
    }
    /**
     * Handle document click
     *
     * @param event
     *
     * @private
     */
    documentClickHandler(event) {
        if (this.isEventWithinElement(this.searchbarElem, event)
            || this.isEventWithinElement(this.inputElem, event)
            || (this.isEventWithinElement(this.itemList, event))) {
            this.setSuggestions(this.suggestions);
        }
        else {
            this.hideItemList();
        }
    }
    ngAfterViewChecked() {
        if (this.showListChanged) {
            this.showListChanged = false;
            this.showSuggestions ? this.itemsShown.emit() : this.itemsHidden.emit();
        }
    }
    ngDoCheck() {
        if (!this.hasFocus) {
            if (this.clearInvalidInput && (this.selected === null || this.multi)) {
                if (this.keyword !== '') {
                    this.keyword = '';
                }
                if (this.inputElem && this.inputElem.nativeElement) {
                    if (this.inputElem.nativeElement.children && this.inputElem.nativeElement.children.length !== 0) {
                        if (this.inputElem.nativeElement.children[0].children && this.inputElem.nativeElement.children[0].children.length !== 0) {
                            if (this.inputElem.nativeElement.children[0].children[0].value) {
                                this.inputElem.nativeElement.children[0].children[0].value = '';
                            }
                        }
                    }
                }
                if (this.searchbarElem && this.searchbarElem.nativeElement) {
                    if (this.searchbarElem.nativeElement.children && this.searchbarElem.nativeElement.children.length !== 0) {
                        if (this.searchbarElem.nativeElement.children[0].children) {
                            if (this.searchbarElem.nativeElement.children[0].children.length !== 0) {
                                if (this.searchbarElem.nativeElement.children[0].children[0].value) {
                                    this.searchbarElem.nativeElement.children[0].children[0].value = '';
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    /**
     * Get element's position on screen
     *
     * @param el
     *
     * @private
     */
    _getPosition(el) {
        let xPos = 0;
        let yPos = 0;
        while (el) {
            if (el.tagName === 'BODY') {
                const xScroll = el.scrollLeft || document.documentElement.scrollLeft;
                const yScroll = el.scrollTop || document.documentElement.scrollTop;
                xPos += (el.offsetLeft - xScroll + el.clientLeft);
                yPos += (el.offsetTop - yScroll + el.clientTop);
            }
            else {
                xPos += (el.offsetLeft - el.scrollLeft + el.clientLeft);
                yPos += (el.offsetTop - el.scrollTop + el.clientTop);
            }
            el = el.offsetParent;
        }
        return {
            x: xPos,
            y: yPos
        };
    }
    isEventWithinElement(elementOrTemplate, event) {
        if (typeof elementOrTemplate === 'undefined') {
            return false;
        }
        let element;
        if (elementOrTemplate instanceof TemplateRef) {
            element = elementOrTemplate.elementRef;
        }
        else if (elementOrTemplate instanceof ViewContainerRef) {
            element = elementOrTemplate.element.nativeElement;
        }
        else {
            element = elementOrTemplate;
        }
        return element
            && element.nativeElement
            && element.nativeElement.contains(event.target);
    }
    /**
     * Get value from form
     *
     * @param selection
     *
     * @private
     */
    getFormValue(selection) {
        if (typeof this.provider === 'undefined') {
            return null;
        }
        if (selection == null || typeof this.provider === 'function') {
            return null;
        }
        let attr = this.provider.formValueAttribute == null ?
            this.provider.labelAttribute : this.provider.formValueAttribute;
        if (typeof selection === 'object' && attr) {
            return selection[attr];
        }
        return selection;
    }
    clickClear() {
        this.clearValue();
        this.hideItemList();
        this.itemsCleared.emit(true);
    }
    /**
     * Clear current input value
     */
    clearValue() {
        this.keyword = '';
        this.selection = null;
        this.formValue = null;
        if (this.focusedOption > 0) {
            this.focusedOption = this.focusedOption - 1;
        }
        return;
    }
    /**
     * Get items for auto-complete
     *
     * @param event
     * @param show
     */
    getItems(event, show) {
        this.isLoading = true;
        if (this.promise) {
            clearTimeout(this.promise);
        }
        this.promise = setTimeout(() => {
            if (event) {
                this.keyword = event.detail.target.value;
            }
            let result;
            if (this.showResultsFirst && this.keyword.trim() === '') {
                this.keyword = '';
            }
            if (typeof this.provider === 'function') {
                result = this.provider(this.keyword);
                this.setSuggestions(result, show);
                this.isLoading = false;
            }
            else {
                result = this.provider.getResults(this.keyword);
                if (result instanceof Subject) {
                    result = result.asObservable();
                }
                else if (result instanceof Promise) {
                    result = from(result);
                }
                if (result instanceof Observable) {
                    result.pipe(finalize(() => {
                        this.isLoading = false;
                    })).subscribe((results) => {
                        this.setSuggestions(results, show);
                    }, (error) => console.error(error));
                }
                else {
                    this.setSuggestions(result, show);
                    this.isLoading = false;
                }
            }
            this.ionAutoInput.emit(this.keyword);
        }, this.autocompleteOptions.debounce);
    }
    /**
     * Get an item's label
     *
     * @param selection
     */
    getLabel(selection) {
        if (typeof this.provider === 'undefined') {
            return '';
        }
        if (selection == null || typeof this.provider === 'function') {
            return '';
        }
        let attr = this.provider.formValueAttribute == null ?
            this.provider.labelAttribute : this.provider.formValueAttribute;
        let value = selection;
        if (this.provider.getItemLabel) {
            value = this.provider.getItemLabel(value);
        }
        if (!this.multi && typeof value !== 'undefined' && Object.prototype.toString.call(value) === '[object Array]') {
            if (value.length === 0) {
                return '';
            }
            else {
                value = value[0];
            }
        }
        if (typeof value === 'object' && attr) {
            return value[attr] || '';
        }
        return value || '';
    }
    /**
     * Get menu style
     */
    listStyles() {
        const listLocationStyles = this.listLocationStyles();
        return Object.assign(Object.assign({}, listLocationStyles), this.styles.list);
    }
    listLocationStyles() {
        let location = this.location;
        if (this.location === 'auto') {
            const elementY = this._getPosition(this.searchbarElem.nativeElement).y;
            const windowY = window.innerHeight;
            if (elementY > windowY - elementY) {
                location = 'top';
            }
            else {
                location = 'bottom';
            }
        }
        if (location === 'bottom') {
            return {};
        }
        else {
            return {
                'bottom': '37px'
            };
        }
    }
    /**
     * Handles tab key press.
     * If `selectOnTabOut` is `true`, will select currently focused item
     *
     * @param event
     */
    handleTabOut(event) {
        if (this.selectOnTabOut && this.suggestions.length !== 0) {
            if (this.focusedOption !== -1) {
                this.selectItem(this.suggestions[this.focusedOption]);
            }
            else {
                this.hideItemList();
            }
        }
        else {
            this.hideItemList();
        }
        this.onBlur(event);
    }
    /**
     * Handle tap
     *
     * @param event
     */
    handleTap(event) {
        if (this.showResultsFirst || this.keyword.length > 0) {
            this.getItems();
        }
    }
    /**
     * Handle tap when selecting an item
     *
     * @param $event
     * @param suggestion
     */
    handleSelectTap($event, suggestion) {
        if (typeof suggestion !== 'undefined') {
            this.selectItem(suggestion);
            if ($event.srcEvent) {
                if ($event.srcEvent.stopPropagation) {
                    $event.srcEvent.stopPropagation();
                }
                if ($event.srcEvent.preventDefault) {
                    $event.srcEvent.preventDefault();
                }
            }
            else if ($event.preventDefault) {
                $event.preventDefault();
            }
        }
        return false;
    }
    /**
     * Hide item list
     */
    hideItemList() {
        if (this.showSuggestions === false && this.alwaysShowList === false) {
            this.showListChanged = true;
        }
        this.showSuggestions = this.alwaysShowList;
        this.focusedOption = -1;
    }
    highlightItem(direction) {
        if (this.showSuggestions === false) {
            this.showItemList();
        }
        let max = this.suggestions.length - 1;
        if (max > this.maxResults) {
            max = this.maxResults - 1;
        }
        if (direction < 0) {
            if (this.focusedOption === -1 || this.focusedOption === max) {
                this.focusedOption = 0;
            }
            else {
                this.focusedOption++;
            }
        }
        else if (direction > 0) {
            if (this.focusedOption === -1 || this.focusedOption === 0) {
                this.focusedOption = max;
            }
            else {
                this.focusedOption--;
            }
        }
    }
    /**
     * Fired when the input focused
     */
    onFocus(event) {
        this.hasFocus = true;
        this.getItems();
        event = this._reflectName(event);
        this.autoFocus.emit(event);
        this.focus.emit(event);
    }
    /**
     * Fired when the input focused
     */
    onBlur(event) {
        this.hasFocus = false;
        event = this._reflectName(event);
        this.autoBlur.emit(event);
        this.blur.emit(event);
    }
    _reflectName(event) {
        if (typeof event.srcElement.attributes['ng-reflect-name'] === 'object') {
            event.srcElement.name = event.srcElement.attributes['ng-reflect-name'].value;
        }
        return event;
    }
    /**
     * Register onChangeCallback
     *
     * @param fn
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * Register onTouchedCallback
     *
     * @param fn
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * Remove already selected suggestions
     *
     * @param suggestions
     */
    removeDuplicates(suggestions) {
        const selectedCount = this.selected ? this.selected.length : 0;
        const suggestionCount = suggestions.length;
        for (let i = 0; i < selectedCount; i++) {
            const selectedLabel = this.getLabel(this.selected[i]);
            for (let j = 0; j < suggestionCount; j++) {
                const suggestedLabel = this.getLabel(suggestions[j]);
                if (selectedLabel === suggestedLabel) {
                    suggestions.splice(j, 1);
                }
            }
        }
        return suggestions;
    }
    removeExcluded(suggestions) {
        const excludedCount = this.exclude.length;
        for (let i = 0; i < excludedCount; i++) {
            let excludeLabel = this.exclude[i];
            if (typeof excludeLabel === 'object') {
                excludeLabel = this.getLabel(excludeLabel);
            }
            const suggestionCount = suggestions.length;
            for (let j = 0; j < suggestionCount; j++) {
                const suggestedLabel = this.getLabel(suggestions[j]);
                if (excludeLabel === suggestedLabel) {
                    suggestions.splice(j, 1);
                    break;
                }
            }
        }
        return suggestions;
    }
    /**
     * Remove item from selected
     *
     * @param selection
     * @param notify?
     */
    removeItem(selection, notify) {
        const count = this.selected ? this.selected.length : 0;
        for (let i = 0; i < count; i++) {
            const item = this.selected[i];
            const selectedLabel = this.getLabel(selection);
            const itemLabel = this.getLabel(item);
            if (selectedLabel === itemLabel) {
                this.selected.splice(i, 1);
            }
        }
        notify = typeof notify === 'undefined' ? true : notify;
        if (notify) {
            this.itemRemoved.emit(selection);
            this.itemsChange.emit(this.selected);
        }
        this.modelChange.emit(this.selected);
    }
    /**
     * Select item from list
     *
     * @param selection
     **/
    selectItem(selection) {
        this.keyword = this.getLabel(selection);
        this.formValue = this.getFormValue(selection);
        this.updateModel(this.formValue);
        if (this.hideListOnSelection) {
            this.hideItemList();
        }
        if (this.multi) {
            if (this.maxSelected === null || this.selected.length <= this.maxSelected) {
                this.clearValue();
                this.selected.push(selection);
                this.itemsChange.emit(this.selected);
            }
            else {
                return;
            }
        }
        else {
            this.selection = selection;
            this.selected = [selection];
            this.itemsChange.emit(selection);
        }
        this.itemSelected.emit(selection);
        this.modelChange.emit(this.selected);
    }
    /**
     * Set focus of searchbar
     */
    setFocus() {
        if (this.useIonInput && this.inputElem) {
            this.inputElem.nativeElement.setFocus();
        }
        else if (this.searchbarElem) {
            this.searchbarElem.nativeElement.setFocus();
        }
    }
    /**
     * Set suggestions
     *
     * @param suggestions
     * @param show
     */
    setSuggestions(suggestions, show) {
        if (this.removeDuplicateSuggestions) {
            suggestions = this.removeDuplicates(suggestions);
            suggestions = this.removeExcluded(suggestions);
        }
        this.suggestions = suggestions;
        if (show || typeof show === 'undefined') {
            this.showItemList();
        }
        if (this.autoFocusSuggestion) {
            if (this.suggestions.length !== 0) {
                this.focusedOption = 0;
            }
        }
    }
    /**
     * Set current input value
     *
     * Used externally (ie don't delete)
     *
     * @param selection
     */
    setValue(selection) {
        this.formValue = this.getFormValue(selection);
        this.keyword = this.getLabel(selection);
        return;
    }
    /**
     * Show item list
     */
    showItemList() {
        if (this.showSuggestions === false) {
            this.showListChanged = true;
        }
        this.showSuggestions = true;
    }
    /**
     * Update the model
     */
    updateModel(enteredText) {
        if (enteredText !== this.formValue) {
            this.formValue = enteredText;
            if (!this.multi) {
                this.selected = null;
            }
        }
        if (this.onChangeCallback) {
            this.onChangeCallback(this.formValue);
        }
        this.modelChange.emit(this.selected);
    }
    /**
     * Write value
     *
     * @param value
     */
    writeValue(value) {
        if (value !== this.selection) {
            this.selection = value || null;
            this.formValue = this.getFormValue(this.selection);
            this.keyword = this.getLabel(this.selection);
        }
    }
}
AutoCompleteComponent.decorators = [
    { type: Component, args: [{
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: AutoCompleteComponent,
                        multi: true
                    }
                ],
                selector: 'ion-auto-complete',
                template: "<ng-template #defaultSelection\n             let-attrs=\"attrs\">\n    <ion-chip class=\"{{ attrs.removeButtonClasses }}\"\n              [color]=\"attrs.removeButtonColor\"\n              [outline]=\"true\">\n        <ion-icon *ngIf=\"frontIcon\"\n                  [name]=\"frontIcon\"\n                  [slot]=\"'start'\"\n                  color=\"primary\"></ion-icon>\n\n        <ion-label>{{ attrs.label }}</ion-label>\n\n        <ion-icon *ngIf=\"attrs.removeButtonIcon\"\n                  [name]=\"attrs.removeButtonIcon\"\n                  [slot]=\"attrs.removeButtonSlot\"></ion-icon>\n    </ion-chip>\n</ng-template>\n\n<div *ngIf=\"multi\">\n    <div *ngFor=\"let item of selected\"\n         class=\"selected-items\"\n         (click)=\"removeItem(item)\">\n        <ng-template [ngTemplateOutlet]=\"selectionTemplate || defaultSelection\"\n                     [ngTemplateOutletContext]=\"{\n                            attrs: {\n                              data:                item,\n                              label:               getLabel(item),\n                              removeButtonClasses: removeButtonClasses,\n                              removeButtonColor:   removeButtonColor,\n                              removeButtonIcon:    removeButtonIcon,\n                              removeButtonSlot:    removeButtonSlot\n                            }\n                         }\"></ng-template>\n    </div>\n</div>\n\n<ion-label *ngIf=\"label.length !== 0\"\n           [position]=\"labelPosition\">{{ label }}</ion-label>\n\n<ion-input #inputElem\n           [autocomplete]=\"autocomplete\"\n           [name]=\"name\"\n           (ionInput)=\"getItems($event)\"\n           (tap)=\"handleTap($event)\"\n           [(ngModel)]=\"keyword\"\n           (ngModelChange)=\"updateModel($event)\"\n           [placeholder]=\"autocompleteOptions.placeholder == null ? defaultOpts.placeholder : autocompleteOptions.placeholder\"\n           [type]=\"autocompleteOptions.type == null ? defaultOpts.type : autocompleteOptions.type\"\n           [clearOnEdit]=\"autocompleteOptions.clearOnEdit == null ? defaultOpts.clearOnEdit : autocompleteOptions.clearOnEdit\"\n           [clearInput]=\"autocompleteOptions.clearInput == null ? defaultOpts.clearInput : autocompleteOptions.clearInput\"\n           [color]=\"autocompleteOptions.color == null ? null : autocompleteOptions.color\"\n           [mode]=\"autocompleteOptions.mode == null ? defaultOpts.mode : autocompleteOptions.mode\"\n           [disabled]=\"disabled || (this.maxSelected !== null && this.selected.length >= this.maxSelected)\"\n           [ngClass]=\"{ 'hidden': !useIonInput, 'loading': isLoading }\"\n           [ngStyle]=\"styles.searchbar\"\n           (keydown.tab)=\"handleTabOut($event)\"\n           (keydown.shift.tab)=\"hideItemList()\"\n           (keyup.arrowDown)=\"highlightItem(-1)\"\n           (keyup.arrowUp)=\"highlightItem(1)\"\n           (keyup.enter)=\"handleSelectTap($event, suggestions[focusedOption])\"\n           (keyup.escape)=\"hideItemList()\"\n           (ionFocus)=\"onFocus($event)\"\n           (ionBlur)=\"onBlur($event)\"></ion-input>\n\n<ion-searchbar #searchbarElem\n               [autocomplete]=\"autocomplete\"\n               [name]=\"name\"\n               [animated]=\"autocompleteOptions.animated == null ? defaultOpts.animated : autocompleteOptions.animated\"\n               (ionInput)=\"getItems($event)\"\n               (tap)=\"handleTap($event)\"\n               [(ngModel)]=\"keyword\"\n               (ngModelChange)=\"updateModel($event)\"\n               [cancelButtonIcon]=\"autocompleteOptions.cancelButtonIcon == null ? defaultOpts.cancelButtonIcon : autocompleteOptions.cancelButtonIcon\"\n               [cancelButtonText]=\"autocompleteOptions.cancelButtonText == null ? defaultOpts.cancelButtonText : autocompleteOptions.cancelButtonText\"\n               [clearIcon]=\"autocompleteOptions.clearIcon == null ? defaultOpts.clearIcon : autocompleteOptions.clearIcon\"\n               [color]=\"autocompleteOptions.color == null ? null : autocompleteOptions.color\"\n               [showCancelButton]=\"autocompleteOptions.showCancelButton == null ?\n                                        (defaultOpts.showCancelButton ? 'always' : 'never') :\n                                        (autocompleteOptions.showCancelButton ? 'always' : 'never')\"\n               [debounce]=\"autocompleteOptions.debounce == null ? defaultOpts.debounce : autocompleteOptions.debounce\"\n               [placeholder]=\"autocompleteOptions.placeholder == null ? defaultOpts.placeholder : autocompleteOptions.placeholder\"\n               [autocorrect]=\"autocompleteOptions.autocorrect == null ? defaultOpts.autocorrect : autocompleteOptions.autocorrect\"\n               [mode]=\"autocompleteOptions.mode == null ? defaultOpts.mode : autocompleteOptions.mode\"\n               [searchIcon]=\"autocompleteOptions.searchIcon == null ? defaultOpts.searchIcon : autocompleteOptions.searchIcon\"\n               [spellcheck]=\"autocompleteOptions.spellcheck == null ? defaultOpts.spellcheck : autocompleteOptions.spellcheck\"\n               [type]=\"autocompleteOptions.type == null ? defaultOpts.type : autocompleteOptions.type\"\n               [ngClass]=\"{ 'hidden': useIonInput, 'loading': isLoading, 'disabled': disabled || (this.maxSelected !== null && this.selected.length >= this.maxSelected) }\"\n               [ngStyle]=\"styles.searchbar\"\n               (keydown.tab)=\"handleTabOut($event)\"\n               (keydown.shift.tab)=\"hideItemList()\"\n               (keyup.arrowDown)=\"highlightItem(-1)\"\n               (keyup.arrowUp)=\"highlightItem(1)\"\n               (keyup.enter)=\"handleSelectTap($event, suggestions[focusedOption])\"\n               (keyup.escape)=\"hideItemList()\"\n               (ionClear)=\"clickClear()\"\n               (ionFocus)=\"onFocus($event)\"\n               (ionBlur)=\"onBlur($event)\"></ion-searchbar>\n\n<ng-template #defaultTemplate\n             let-attrs=\"attrs\">\n    <span [innerHTML]='attrs.label | boldprefix:attrs.keyword'></span>\n</ng-template>\n\n<ng-template #defaultEmptyTemplate\n             let-attrs=\"attrs\"\n             class=\"ion-text-center\">\n    {{ autocompleteOptions.noItems }}\n</ng-template>\n\n<ng-template [ngTemplateOutlet]=\"listTemplate || defaultList\"\n             [ngTemplateOutletContext]=\"{\n                        attrs: {\n                            data:            suggestions,\n                            keyword:         keyword,\n                            maxResults:      maxResults,\n                            maxSelected:     maxSelected,\n                            selected:        selected,\n                            showSuggestions: showSuggestions\n                          }\n                        }\"></ng-template>\n\n<ng-template #defaultList\n             let-attrs=\"attrs\">\n    <ul *ngIf=\"!(disabled || (attrs.maxSelected !== null && attrs.selected.length >= attrs.maxSelected)) && attrs.data.length > 0 && attrs.showSuggestions\"\n        #itemList\n        [ngStyle]=\"listStyles()\">\n        <li *ngFor=\"let suggestion of attrs.data| slice:0 : attrs.maxResults; let index = index\"\n            [ngClass]=\"{ 'focus': focusedOption === index }\"\n            [ngStyle]=\"styles.listItem\"\n            (mouseenter)=\"focusedOption = index\"\n            (click)=\"handleSelectTap($event, suggestion)\"\n            (tap)=\"handleSelectTap($event, suggestion)\">\n            <ng-template [ngTemplateOutlet]=\"template || defaultTemplate\"\n                         [ngTemplateOutletContext]=\"{\n                            attrs:{\n                              data:               suggestion,\n                              label:              getLabel(suggestion),\n                              keyword:            keyword,\n                              formValue:          getFormValue(suggestion),\n                              labelAttribute:     getLabel(suggestion),\n                              formValueAttribute: getFormValue(suggestion)\n                            }\n                         }\"></ng-template>\n        </li>\n    </ul>\n\n    <ul *ngIf=\"!isLoading && suggestions.length === 0 && showSuggestions\"\n        [ngStyle]=\"listStyles()\">\n        <li [ngStyle]=\"styles.listItem\">\n            <ng-template [ngTemplateOutlet]=\"emptyTemplate || defaultEmptyTemplate\"\n                         [ngTemplateOutletContext]=\"{\n                        attrs:{\n                          keyword: keyword\n                        }\n                     }\"></ng-template>\n        </li>\n    </ul>\n</ng-template>\n",
                styles: ["ion-auto-complete{overflow:hidden!important;width:90vw;display:inline-block}ion-auto-complete ion-searchbar{padding:1px!important}ion-auto-complete .disabled input.searchbar-input{pointer-events:none;cursor:default}ion-auto-complete ul{position:absolute;width:90vw;margin-top:0;background:#fff;list-style-type:none;padding:0;left:16px;z-index:999;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12)}ion-auto-complete ul li{padding:15px;border-bottom:1px solid #c1c1c1}ion-auto-complete ul li span{pointer-events:none}ion-auto-complete ul ion-auto-complete-item{height:40px;width:100%}ion-auto-complete ul li:last-child{border:none}ion-auto-complete ul li.focus,ion-auto-complete ul li:focus{cursor:pointer;background:#f1f1f1}ion-auto-complete .hidden{display:none}ion-auto-complete .loading input.searchbar-input{background:#fff url(/assets/loading.gif) no-repeat right 4px center;background-size:25px 25px}ion-auto-complete .searchbar-clear-button.sc-ion-searchbar-md{right:34px}ion-auto-complete .selected-items{float:left}"]
            },] }
];
AutoCompleteComponent.ctorParameters = () => [];
AutoCompleteComponent.propDecorators = {
    alwaysShowList: [{ type: Input }],
    autocomplete: [{ type: Input }],
    autoFocusSuggestion: [{ type: Input }],
    clearInvalidInput: [{ type: Input }],
    disabled: [{ type: Input }],
    emptyTemplate: [{ type: Input }],
    exclude: [{ type: Input }],
    frontIcon: [{ type: Input }],
    hideListOnSelection: [{ type: Input }],
    keyword: [{ type: Input }],
    label: [{ type: Input }],
    labelPosition: [{ type: Input }],
    listTemplate: [{ type: Input }],
    location: [{ type: Input }],
    maxResults: [{ type: Input }],
    maxSelected: [{ type: Input }],
    multi: [{ type: Input }],
    name: [{ type: Input }],
    provider: [{ type: Input }],
    removeButtonClasses: [{ type: Input }],
    removeButtonColor: [{ type: Input }],
    removeButtonIcon: [{ type: Input }],
    removeButtonSlot: [{ type: Input }],
    removeDuplicateSuggestions: [{ type: Input }],
    selectionTemplate: [{ type: Input }],
    selectOnTabOut: [{ type: Input }],
    showResultsFirst: [{ type: Input }],
    styles: [{ type: Input }],
    template: [{ type: Input }],
    useIonInput: [{ type: Input }],
    autoFocus: [{ type: Output }],
    autoBlur: [{ type: Output }],
    blur: [{ type: Output }],
    focus: [{ type: Output }],
    ionAutoInput: [{ type: Output }],
    itemsChange: [{ type: Output }],
    itemsCleared: [{ type: Output }],
    itemsHidden: [{ type: Output }],
    itemRemoved: [{ type: Output }],
    itemSelected: [{ type: Output }],
    itemsShown: [{ type: Output }],
    modelChange: [{ type: Output }],
    searchbarElem: [{ type: ViewChild, args: ['searchbarElem',
                {
                    read: ElementRef
                },] }],
    inputElem: [{ type: ViewChild, args: ['inputElem',
                {
                    read: ElementRef
                },] }],
    itemList: [{ type: ViewChild, args: ['itemList',
                {
                    read: ElementRef
                },] }],
    dataProvider: [{ type: Input }],
    eager: [{ type: Input }],
    options: [{ type: Input }],
    model: [{ type: Input }],
    showList: [{ type: Input }],
    documentClickHandler: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1jb21wbGV0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXV0by1jb21wbGV0ZS9hdXRvLWNvbXBsZXRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFdBQVcsRUFDWCxTQUFTLEVBQ1QsWUFBWSxFQUNaLFVBQVUsRUFFVixnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF1QixpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXZFLE9BQU8sRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFFbkUsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFnQmpFLE1BQU0sT0FBTyxxQkFBcUI7SUFtTWhDOztPQUVHO0lBQ0g7UUFyTU8sd0JBQW1CLEdBQXVCLElBQUksbUJBQW1CLEVBQUUsQ0FBQztRQUVwRSxhQUFRLEdBQVcsS0FBSyxDQUFDO1FBQ3pCLGNBQVMsR0FBVyxLQUFLLENBQUM7UUFDMUIsa0JBQWEsR0FBVSxDQUFDLENBQUMsQ0FBQztRQUsxQixvQkFBZSxHQUFXLEtBQUssQ0FBQztRQUcvQixzQkFBaUIsR0FBa0IsS0FBSyxDQUFDO1FBQ3pDLHFCQUFnQixHQUFrQixLQUFLLENBQUM7UUFDeEMsb0JBQWUsR0FBVyxLQUFLLENBQUM7UUFFeEIsbUJBQWMsR0FBVyxLQUFLLENBQUM7UUFFL0Isd0JBQW1CLEdBQVcsSUFBSSxDQUFDO1FBQ25DLHNCQUFpQixHQUFXLElBQUksQ0FBQztRQUNqQyxhQUFRLEdBQVcsS0FB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LEtBQUs7b0JBV0wsS0FBSztzQkFPTCxLQUFLO29CQW9DTCxLQUFLO3VCQWtCTCxLQUFLO21DQXlCTCxZQUFZLFNBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIERvQ2hlY2ssXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDaGlsZCxcbiAgSG9zdExpc3RlbmVyLFxuICBFbGVtZW50UmVmLFxuICBBZnRlclZpZXdDaGVja2VkLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHtmcm9tLCBPYnNlcnZhYmxlLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmluYWxpemV9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtBdXRvQ29tcGxldGVPcHRpb25zfSBmcm9tICcuLi9hdXRvLWNvbXBsZXRlLW9wdGlvbnMubW9kZWwnO1xuaW1wb3J0IHtBdXRvQ29tcGxldGVTZXJ2aWNlfSBmcm9tICcuLi9hdXRvLWNvbXBsZXRlLnNlcnZpY2UnO1xuaW1wb3J0IHtBdXRvQ29tcGxldGVTdHlsZXN9IGZyb20gJy4uL2F1dG8tY29tcGxldGUtc3R5bGVzLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IEF1dG9Db21wbGV0ZUNvbXBvbmVudCxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdLFxuICBzZWxlY3RvcjogICAgJ2lvbi1hdXRvLWNvbXBsZXRlJyxcbiAgc3R5bGVVcmxzOiBbXG4gICAgJy4vYXV0by1jb21wbGV0ZS5jb21wb25lbnQuc2NzcydcbiAgXSxcbiAgdGVtcGxhdGVVcmw6ICdhdXRvLWNvbXBsZXRlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBdXRvQ29tcGxldGVDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkLCBDb250cm9sVmFsdWVBY2Nlc3NvciwgRG9DaGVjayB7XG4gIHB1YmxpYyBhdXRvY29tcGxldGVPcHRpb25zOkF1dG9Db21wbGV0ZU9wdGlvbnMgPSBuZXcgQXV0b0NvbXBsZXRlT3B0aW9ucygpO1xuICBwdWJsaWMgZGVmYXVsdE9wdHM6QXV0b0NvbXBsZXRlT3B0aW9ucztcbiAgcHVibGljIGhhc0ZvY3VzOmJvb2xlYW4gPSBmYWxzZTtcbiAgcHVibGljIGlzTG9hZGluZzpib29sZWFuID0gZmFsc2U7XG4gIHB1YmxpYyBmb2N1c2VkT3B0aW9uOm51bWJlciA9IC0xO1xuICBwdWJsaWMgZm9ybVZhbHVlOmFueTtcbiAgcHVibGljIHByb21pc2U7XG4gIHB1YmxpYyBzZWxlY3RlZDphbnl8YW55W107XG4gIHB1YmxpYyBzZWxlY3Rpb246YW55O1xuICBwdWJsaWMgc2hvd1N1Z2dlc3Rpb25zOmJvb2xlYW4gPSBmYWxzZTtcbiAgcHVibGljIHN1Z2dlc3Rpb25zOmFueVtdO1xuXG4gIHByaXZhdGUgb25Ub3VjaGVkQ2FsbGJhY2s6RnVuY3Rpb258ZmFsc2UgPSBmYWxzZTtcbiAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrOkZ1bmN0aW9ufGZhbHNlID0gZmFsc2U7XG4gIHByaXZhdGUgc2hvd0xpc3RDaGFuZ2VkOmJvb2xlYW4gPSBmYWxzZTtcblxuICBASW5wdXQoKSBwdWJsaWMgYWx3YXlzU2hvd0xpc3Q6Ym9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBwdWJsaWMgYXV0b2NvbXBsZXRlOnN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGF1dG9Gb2N1c1N1Z2dlc3Rpb246Ym9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIHB1YmxpYyBjbGVhckludmFsaWRJbnB1dDpib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgcHVibGljIGRpc2FibGVkOmJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgcHVibGljIGVtcHR5VGVtcGxhdGU6VGVtcGxhdGVSZWY8YW55PjtcbiAgQElucHV0KCkgcHVibGljIGV4Y2x1ZGU6YW55W10gPSBbXTtcbiAgQElucHV0KCkgcHVibGljIGZyb250SWNvbjpmYWxzZXxzdHJpbmcgPSBmYWxzZTtcbiAgQElucHV0KCkgcHVibGljIGhpZGVMaXN0T25TZWxlY3Rpb246Ym9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIHB1YmxpYyBrZXl3b3JkOnN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGxhYmVsOnN0cmluZyA9ICcnO1xuICBASW5wdXQoKSBwdWJsaWMgbGFiZWxQb3NpdGlvbjpzdHJpbmcgPSAnZml4ZWQnO1xuICBASW5wdXQoKSBwdWJsaWMgbGlzdFRlbXBsYXRlOlRlbXBsYXRlUmVmPGFueT47XG4gIEBJbnB1dCgpIHB1YmxpYyBsb2NhdGlvbjpzdHJpbmcgPSAnYXV0byc7XG4gIEBJbnB1dCgpIHB1YmxpYyBtYXhSZXN1bHRzOm51bWJlciA9IDg7XG4gIEBJbnB1dCgpIHB1YmxpYyBtYXhTZWxlY3RlZDpudW1iZXIgPSBudWxsO1xuICBASW5wdXQoKSBwdWJsaWMgbXVsdGk6Ym9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBwdWJsaWMgbmFtZTpzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgcHVibGljIHByb3ZpZGVyOkF1dG9Db21wbGV0ZVNlcnZpY2V8RnVuY3Rpb247XG4gIEBJbnB1dCgpIHB1YmxpYyByZW1vdmVCdXR0b25DbGFzc2VzOnN0cmluZyA9ICcnO1xuICBASW5wdXQoKSBwdWJsaWMgcmVtb3ZlQnV0dG9uQ29sb3I6c3RyaW5nID0gJ3ByaW1hcnknO1xuICBASW5wdXQoKSBwdWJsaWMgcmVtb3ZlQnV0dG9uSWNvbjpzdHJpbmd8ZmFsc2UgPSAnY2xvc2UtY2lyY2xlJztcbiAgQElucHV0KCkgcHVibGljIHJlbW92ZUJ1dHRvblNsb3Q6c3RyaW5nID0gJ2VuZCc7XG4gIEBJbnB1dCgpIHB1YmxpYyByZW1vdmVEdXBsaWNhdGVTdWdnZXN0aW9uczpib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgcHVibGljIHNlbGVjdGlvblRlbXBsYXRlOlRlbXBsYXRlUmVmPGFueT47XG4gIEBJbnB1dCgpIHB1YmxpYyBzZWxlY3RPblRhYk91dDpib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgcHVibGljIHNob3dSZXN1bHRzRmlyc3Q6Ym9vbGVhbjtcbiAgQElucHV0KCkgcHVibGljIHN0eWxlcyA9IG5ldyBBdXRvQ29tcGxldGVTdHlsZXM7XG4gIEBJbnB1dCgpIHB1YmxpYyB0ZW1wbGF0ZTpUZW1wbGF0ZVJlZjxhbnk+O1xuICBASW5wdXQoKSBwdWJsaWMgdXNlSW9uSW5wdXQ6Ym9vbGVhbiA9IGZhbHNlO1xuXG4gIEBPdXRwdXQoKSBwdWJsaWMgYXV0b0ZvY3VzOkV2ZW50RW1pdHRlcjxhbnk+O1xuICBAT3V0cHV0KCkgcHVibGljIGF1dG9CbHVyOkV2ZW50RW1pdHRlcjxhbnk+O1xuICBAT3V0cHV0KCkgcHVibGljIGJsdXI6RXZlbnRFbWl0dGVyPGFueT47XG4gIEBPdXRwdXQoKSBwdWJsaWMgZm9jdXM6RXZlbnRFbWl0dGVyPGFueT47XG4gIEBPdXRwdXQoKSBwdWJsaWMgaW9uQXV0b0lucHV0OkV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICBAT3V0cHV0KCkgcHVibGljIGl0ZW1zQ2hhbmdlOkV2ZW50RW1pdHRlcjxhbnk+O1xuICBAT3V0cHV0KCkgcHVibGljIGl0ZW1zQ2xlYXJlZDpFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gIEBPdXRwdXQoKSBwdWJsaWMgaXRlbXNIaWRkZW46RXZlbnRFbWl0dGVyPGFueT47XG4gIEBPdXRwdXQoKSBwdWJsaWMgaXRlbVJlbW92ZWQ6RXZlbnRFbWl0dGVyPGFueT47XG4gIEBPdXRwdXQoKSBwdWJsaWMgaXRlbVNlbGVjdGVkOkV2ZW50RW1pdHRlcjxhbnk+O1xuICBAT3V0cHV0KCkgcHVibGljIGl0ZW1zU2hvd246RXZlbnRFbWl0dGVyPGFueT47XG4gIEBPdXRwdXQoKSBwdWJsaWMgbW9kZWxDaGFuZ2U6RXZlbnRFbWl0dGVyPGFueXxhbnlbXT47XG5cbiAgQFZpZXdDaGlsZChcbiAgICAnc2VhcmNoYmFyRWxlbScsXG4gICAge1xuICAgICAgcmVhZDogRWxlbWVudFJlZlxuICAgIH1cbiAgKVxuICBwcml2YXRlIHNlYXJjaGJhckVsZW06RWxlbWVudFJlZjtcblxuICBAVmlld0NoaWxkKFxuICAgICdpbnB1dEVsZW0nLFxuICAgIHtcbiAgICAgIHJlYWQ6IEVsZW1lbnRSZWZcbiAgICB9XG4gIClcbiAgcHJpdmF0ZSBpbnB1dEVsZW06RWxlbWVudFJlZjtcblxuICBAVmlld0NoaWxkKFxuICAgICdpdGVtTGlzdCcsXG4gICAge1xuICAgICAgcmVhZDogRWxlbWVudFJlZlxuICAgIH1cbiAgKVxuICBwcml2YXRlIGl0ZW1MaXN0OkVsZW1lbnRSZWY7XG5cbiAgQElucHV0KClcbiAgc2V0IGRhdGFQcm92aWRlcihwcm92aWRlcjpBdXRvQ29tcGxldGVTZXJ2aWNlfEZ1bmN0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiBwcm92aWRlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMucHJvdmlkZXIgPSBwcm92aWRlcjtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnNlbGVjdGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLmtleXdvcmQgPSB0aGlzLmdldExhYmVsKHRoaXMuc2VsZWN0ZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBlYWdlcihlYWdlcjpib29sZWFuKSB7XG4gICAgaWYgKGVhZ2VyKSB7XG4gICAgICB0aGlzLmdldEl0ZW1zKG51bGwsIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgb3B0aW9ucyhvcHRpb25zOkF1dG9Db21wbGV0ZU9wdGlvbnN8YW55KSB7XG4gICAgdGhpcy5hdXRvY29tcGxldGVPcHRpb25zID0gbmV3IEF1dG9Db21wbGV0ZU9wdGlvbnMoKTtcblxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcblxuICAgIGNvbnN0IGtleXNMZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXNMZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlT3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGhpcy5zZWxlY3RlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5hdXRvY29tcGxldGVPcHRpb25zLnZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5hdXRvY29tcGxldGVPcHRpb25zLnZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMubXVsdGkpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gW107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5rZXl3b3JkID0gdGhpcy5nZXRMYWJlbCh0aGlzLnNlbGVjdGVkKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hdXRvY29tcGxldGVPcHRpb25zLmF1dG9jb21wbGV0ZSkge1xuICAgICAgdGhpcy5hdXRvY29tcGxldGUgPSB0aGlzLmF1dG9jb21wbGV0ZU9wdGlvbnMuYXV0b2NvbXBsZXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmF1dG9jb21wbGV0ZSA9ICdvZmYnO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIGdldCBtb2RlbCgpOmFueXxhbnlbXSB7XG4gICAgbGV0IG1vZGVsID0gdGhpcy5zZWxlY3RlZDtcbiAgICBpZiAoIXRoaXMubXVsdGkgJiYgdHlwZW9mIHRoaXMuc2VsZWN0ZWQubGVuZ3RoICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIG1vZGVsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGVsID0gdGhpcy5zZWxlY3RlZFswXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbW9kZWw7XG4gIH1cblxuICBzZXQgbW9kZWwoc2VsZWN0ZWQ6YW55fGFueVtdKSB7XG4gICAgdGhpcy5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICB9XG5cbiAgQElucHV0KClcbiAgcHVibGljIGdldCBzaG93TGlzdCgpOmJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnNob3dTdWdnZXN0aW9ucztcbiAgfVxuXG4gIHB1YmxpYyBzZXQgc2hvd0xpc3QodmFsdWU6Ym9vbGVhbikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2hvd1N1Z2dlc3Rpb25zID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2hvd1N1Z2dlc3Rpb25zID0gdmFsdWUgPT09IHRydWU7XG4gICAgdGhpcy5zaG93TGlzdENoYW5nZWQgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBkb2N1bWVudCBjbGlja1xuICAgKlxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OmNsaWNrJywgWyckZXZlbnQnXSlcbiAgcHVibGljIGRvY3VtZW50Q2xpY2tIYW5kbGVyKGV2ZW50OkV2ZW50KTp2b2lkIHtcbiAgICBpZiAoXG4gICAgICAgIHRoaXMuaXNFdmVudFdpdGhpbkVsZW1lbnQodGhpcy5zZWFyY2hiYXJFbGVtLCBldmVudClcbiAgICAgICAgfHwgdGhpcy5pc0V2ZW50V2l0aGluRWxlbWVudCh0aGlzLmlucHV0RWxlbSwgZXZlbnQpXG4gICAgICAgIHx8ICh0aGlzLmlzRXZlbnRXaXRoaW5FbGVtZW50KHRoaXMuaXRlbUxpc3QsIGV2ZW50KSlcbiAgICApIHtcbiAgICAgIHRoaXMuc2V0U3VnZ2VzdGlvbnModGhpcy5zdWdnZXN0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZUl0ZW1MaXN0KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYXV0b0JsdXIgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICB0aGlzLmF1dG9Gb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIHRoaXMuYmx1ciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIHRoaXMuZm9jdXMgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICB0aGlzLmlvbkF1dG9JbnB1dCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICAgIHRoaXMuaXRlbXNDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICB0aGlzLml0ZW1zQ2xlYXJlZCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcbiAgICB0aGlzLml0ZW1zSGlkZGVuID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgdGhpcy5pdGVtUmVtb3ZlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIHRoaXMuaXRlbVNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgdGhpcy5pdGVtc1Nob3duID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgdGhpcy5tb2RlbENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55fGFueVtdPigpO1xuXG4gICAgdGhpcy5rZXl3b3JkID0gJyc7XG4gICAgdGhpcy5zdWdnZXN0aW9ucyA9IFtdO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCk6dm9pZCB7XG4gICAgaWYgKHRoaXMuc2hvd0xpc3RDaGFuZ2VkKSB7XG4gICAgICB0aGlzLnNob3dMaXN0Q2hhbmdlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5zaG93U3VnZ2VzdGlvbnMgPyB0aGlzLml0ZW1zU2hvd24uZW1pdCgpIDogdGhpcy5pdGVtc0hpZGRlbi5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgbmdEb0NoZWNrKCk6dm9pZCB7XG4gICAgaWYgKCF0aGlzLmhhc0ZvY3VzKSB7XG4gICAgICBpZiAodGhpcy5jbGVhckludmFsaWRJbnB1dCAmJiAodGhpcy5zZWxlY3RlZCA9PT0gbnVsbCB8fCB0aGlzLm11bHRpKSkge1xuICAgICAgICBpZiAodGhpcy5rZXl3b3JkICE9PSAnJykge1xuICAgICAgICAgIHRoaXMua2V5d29yZCA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaW5wdXRFbGVtICYmIHRoaXMuaW5wdXRFbGVtLm5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAodGhpcy5pbnB1dEVsZW0ubmF0aXZlRWxlbWVudC5jaGlsZHJlbiAmJiB0aGlzLmlucHV0RWxlbS5uYXRpdmVFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXRFbGVtLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5bMF0uY2hpbGRyZW4gJiYgdGhpcy5pbnB1dEVsZW0ubmF0aXZlRWxlbWVudC5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXRFbGVtLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0udmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0RWxlbS5uYXRpdmVFbGVtZW50LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLnZhbHVlID0gJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZWFyY2hiYXJFbGVtICYmIHRoaXMuc2VhcmNoYmFyRWxlbS5uYXRpdmVFbGVtZW50KSB7XG4gICAgICAgICAgaWYgKHRoaXMuc2VhcmNoYmFyRWxlbS5uYXRpdmVFbGVtZW50LmNoaWxkcmVuICYmIHRoaXMuc2VhcmNoYmFyRWxlbS5uYXRpdmVFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VhcmNoYmFyRWxlbS5uYXRpdmVFbGVtZW50LmNoaWxkcmVuWzBdLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnNlYXJjaGJhckVsZW0ubmF0aXZlRWxlbWVudC5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWFyY2hiYXJFbGVtLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0udmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoYmFyRWxlbS5uYXRpdmVFbGVtZW50LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLnZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBlbGVtZW50J3MgcG9zaXRpb24gb24gc2NyZWVuXG4gICAqXG4gICAqIEBwYXJhbSBlbFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBfZ2V0UG9zaXRpb24oZWwpOmFueSB7XG4gICAgbGV0IHhQb3MgPSAwO1xuICAgIGxldCB5UG9zID0gMDtcblxuICAgIHdoaWxlIChlbCkge1xuICAgICAgaWYgKGVsLnRhZ05hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBjb25zdCB4U2Nyb2xsID0gZWwuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgY29uc3QgeVNjcm9sbCA9IGVsLnNjcm9sbFRvcCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuXG4gICAgICAgIHhQb3MgKz0gKGVsLm9mZnNldExlZnQgLSB4U2Nyb2xsICsgZWwuY2xpZW50TGVmdCk7XG4gICAgICAgIHlQb3MgKz0gKGVsLm9mZnNldFRvcCAtIHlTY3JvbGwgKyBlbC5jbGllbnRUb3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeFBvcyArPSAoZWwub2Zmc2V0TGVmdCAtIGVsLnNjcm9sbExlZnQgKyBlbC5jbGllbnRMZWZ0KTtcbiAgICAgICAgeVBvcyArPSAoZWwub2Zmc2V0VG9wIC0gZWwuc2Nyb2xsVG9wICsgZWwuY2xpZW50VG9wKTtcbiAgICAgIH1cblxuICAgICAgZWwgPSBlbC5vZmZzZXRQYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB4OiB4UG9zLFxuICAgICAgeTogeVBvc1xuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGlzRXZlbnRXaXRoaW5FbGVtZW50KGVsZW1lbnRPclRlbXBsYXRlOkVsZW1lbnRSZWZ8VGVtcGxhdGVSZWY8YW55PnxWaWV3Q29udGFpbmVyUmVmLCBldmVudDpFdmVudCk6Ym9vbGVhbiB7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50T3JUZW1wbGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsZXQgZWxlbWVudDpFbGVtZW50UmVmO1xuICAgIGlmIChlbGVtZW50T3JUZW1wbGF0ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICBlbGVtZW50ID0gZWxlbWVudE9yVGVtcGxhdGUuZWxlbWVudFJlZjtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnRPclRlbXBsYXRlIGluc3RhbmNlb2YgVmlld0NvbnRhaW5lclJlZikge1xuICAgICAgZWxlbWVudCA9IGVsZW1lbnRPclRlbXBsYXRlLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudCA9IGVsZW1lbnRPclRlbXBsYXRlO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50XG4gICAgICAgICYmIGVsZW1lbnQubmF0aXZlRWxlbWVudFxuICAgICAgICAmJiBlbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY29udGFpbnMoPHN0cmluZz48dW5rbm93bj5ldmVudC50YXJnZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB2YWx1ZSBmcm9tIGZvcm1cbiAgICpcbiAgICogQHBhcmFtIHNlbGVjdGlvblxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHVibGljIGdldEZvcm1WYWx1ZShzZWxlY3Rpb246YW55KTphbnkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5wcm92aWRlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChzZWxlY3Rpb24gPT0gbnVsbCB8fCB0eXBlb2YgdGhpcy5wcm92aWRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGF0dHIgPSB0aGlzLnByb3ZpZGVyLmZvcm1WYWx1ZUF0dHJpYnV0ZSA9PSBudWxsID9cbiAgICAgICAgdGhpcy5wcm92aWRlci5sYWJlbEF0dHJpYnV0ZSA6IHRoaXMucHJvdmlkZXIuZm9ybVZhbHVlQXR0cmlidXRlO1xuXG4gICAgaWYgKHR5cGVvZiBzZWxlY3Rpb24gPT09ICdvYmplY3QnICYmIGF0dHIpIHtcbiAgICAgIHJldHVybiBzZWxlY3Rpb25bYXR0cl07XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdGlvbjtcbiAgfVxuXG4gIGNsaWNrQ2xlYXIoKTp2b2lkIHtcbiAgICB0aGlzLmNsZWFyVmFsdWUoKTtcbiAgICB0aGlzLmhpZGVJdGVtTGlzdCgpO1xuXG4gICAgdGhpcy5pdGVtc0NsZWFyZWQuZW1pdCh0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBjdXJyZW50IGlucHV0IHZhbHVlXG4gICAqL1xuICBwdWJsaWMgY2xlYXJWYWx1ZSgpOnZvaWQge1xuICAgIHRoaXMua2V5d29yZCA9ICcnO1xuICAgIHRoaXMuc2VsZWN0aW9uID0gbnVsbDtcbiAgICB0aGlzLmZvcm1WYWx1ZSA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5mb2N1c2VkT3B0aW9uID4gMCkge1xuICAgICAgdGhpcy5mb2N1c2VkT3B0aW9uID0gdGhpcy5mb2N1c2VkT3B0aW9uIC0gMTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IGl0ZW1zIGZvciBhdXRvLWNvbXBsZXRlXG4gICAqXG4gICAqIEBwYXJhbSBldmVudFxuICAgKiBAcGFyYW0gc2hvd1xuICAgKi9cbiAgcHVibGljIGdldEl0ZW1zKGV2ZW50Pywgc2hvdz86Ym9vbGVhbik6dm9pZCB7XG4gICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMucHJvbWlzZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucHJvbWlzZSk7XG4gICAgfVxuXG4gICAgdGhpcy5wcm9taXNlID0gc2V0VGltZW91dChcbiAgICAgICgpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgdGhpcy5rZXl3b3JkID0gZXZlbnQuZGV0YWlsLnRhcmdldC52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXN1bHQ7XG5cbiAgICAgICAgaWYgKHRoaXMuc2hvd1Jlc3VsdHNGaXJzdCAmJiB0aGlzLmtleXdvcmQudHJpbSgpID09PSAnJykge1xuICAgICAgICAgIHRoaXMua2V5d29yZCA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3ZpZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm92aWRlcih0aGlzLmtleXdvcmQpO1xuXG4gICAgICAgICAgdGhpcy5zZXRTdWdnZXN0aW9ucyhyZXN1bHQsIHNob3cpO1xuXG4gICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLnByb3ZpZGVyLmdldFJlc3VsdHModGhpcy5rZXl3b3JkKTtcblxuICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBTdWJqZWN0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmcm9tKHJlc3VsdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgICAgIHJlc3VsdC5waXBlKFxuICAgICAgICAgICAgICAgIGZpbmFsaXplKFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChyZXN1bHRzOiBhbnlbXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdWdnZXN0aW9ucyhyZXN1bHRzLCBzaG93KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRTdWdnZXN0aW9ucyhyZXN1bHQsIHNob3cpO1xuXG4gICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW9uQXV0b0lucHV0LmVtaXQodGhpcy5rZXl3b3JkKTtcbiAgICAgIH0sXG4gICAgICB0aGlzLmF1dG9jb21wbGV0ZU9wdGlvbnMuZGVib3VuY2VcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBpdGVtJ3MgbGFiZWxcbiAgICpcbiAgICogQHBhcmFtIHNlbGVjdGlvblxuICAgKi9cbiAgcHVibGljIGdldExhYmVsKHNlbGVjdGlvbjphbnl8YW55W10pOnN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnByb3ZpZGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGlmIChzZWxlY3Rpb24gPT0gbnVsbCB8fCB0eXBlb2YgdGhpcy5wcm92aWRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGxldCBhdHRyID0gdGhpcy5wcm92aWRlci5mb3JtVmFsdWVBdHRyaWJ1dGUgPT0gbnVsbCA/XG4gICAgICAgIHRoaXMucHJvdmlkZXIubGFiZWxBdHRyaWJ1dGUgOiB0aGlzLnByb3ZpZGVyLmZvcm1WYWx1ZUF0dHJpYnV0ZTtcblxuICAgIGxldCB2YWx1ZSA9IHNlbGVjdGlvbjtcblxuICAgIGlmICh0aGlzLnByb3ZpZGVyLmdldEl0ZW1MYWJlbCkge1xuICAgICAgdmFsdWUgPSB0aGlzLnByb3ZpZGVyLmdldEl0ZW1MYWJlbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm11bHRpICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIGF0dHIpIHtcbiAgICAgIHJldHVybiB2YWx1ZVthdHRyXSB8fCAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUgfHwgJyc7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG1lbnUgc3R5bGVcbiAgICovXG4gIHB1YmxpYyBsaXN0U3R5bGVzKCk6YW55IHtcbiAgICBjb25zdCBsaXN0TG9jYXRpb25TdHlsZXMgPSB0aGlzLmxpc3RMb2NhdGlvblN0eWxlcygpO1xuICAgIHJldHVybiB7IC4uLmxpc3RMb2NhdGlvblN0eWxlcywgLi4udGhpcy5zdHlsZXMubGlzdCB9O1xuICB9XG5cbiAgcHJpdmF0ZSBsaXN0TG9jYXRpb25TdHlsZXMoKTphbnkge1xuICAgIGxldCBsb2NhdGlvbiA9IHRoaXMubG9jYXRpb247XG5cbiAgICBpZiAodGhpcy5sb2NhdGlvbiA9PT0gJ2F1dG8nKSB7XG4gICAgICBjb25zdCBlbGVtZW50WSA9IHRoaXMuX2dldFBvc2l0aW9uKFxuICAgICAgICB0aGlzLnNlYXJjaGJhckVsZW0ubmF0aXZlRWxlbWVudFxuICAgICAgKS55O1xuXG4gICAgICBjb25zdCB3aW5kb3dZID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgICBpZiAoZWxlbWVudFkgPiB3aW5kb3dZIC0gZWxlbWVudFkpIHtcbiAgICAgICAgbG9jYXRpb24gPSAndG9wJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvY2F0aW9uID0gJ2JvdHRvbSc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnYm90dG9tJzogJzM3cHgnXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRhYiBrZXkgcHJlc3MuXG4gICAqIElmIGBzZWxlY3RPblRhYk91dGAgaXMgYHRydWVgLCB3aWxsIHNlbGVjdCBjdXJyZW50bHkgZm9jdXNlZCBpdGVtXG4gICAqIFxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICovXG4gIHB1YmxpYyBoYW5kbGVUYWJPdXQoZXZlbnQpOnZvaWQge1xuICAgIGlmICh0aGlzLnNlbGVjdE9uVGFiT3V0ICYmIHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5mb2N1c2VkT3B0aW9uICE9PSAtMSkge1xuICAgICAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5zdWdnZXN0aW9uc1t0aGlzLmZvY3VzZWRPcHRpb25dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlkZUl0ZW1MaXN0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZUl0ZW1MaXN0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5vbkJsdXIoZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSB0YXBcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50XG4gICAqL1xuICBwdWJsaWMgaGFuZGxlVGFwKGV2ZW50KTp2b2lkIHtcbiAgICBpZiAodGhpcy5zaG93UmVzdWx0c0ZpcnN0IHx8IHRoaXMua2V5d29yZC5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmdldEl0ZW1zKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSB0YXAgd2hlbiBzZWxlY3RpbmcgYW4gaXRlbVxuICAgKlxuICAgKiBAcGFyYW0gJGV2ZW50XG4gICAqIEBwYXJhbSBzdWdnZXN0aW9uXG4gICAqL1xuICBwdWJsaWMgaGFuZGxlU2VsZWN0VGFwKCRldmVudCwgc3VnZ2VzdGlvbj86YW55KTpmYWxzZSB7XG4gICAgaWYgKHR5cGVvZiBzdWdnZXN0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHN1Z2dlc3Rpb24pO1xuXG4gICAgICBpZiAoJGV2ZW50LnNyY0V2ZW50KSB7XG4gICAgICAgIGlmICgkZXZlbnQuc3JjRXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgJGV2ZW50LnNyY0V2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkZXZlbnQuc3JjRXZlbnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAkZXZlbnQuc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgkZXZlbnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEhpZGUgaXRlbSBsaXN0XG4gICAqL1xuICBwdWJsaWMgaGlkZUl0ZW1MaXN0KCk6dm9pZCB7XG4gICAgaWYgKHRoaXMuc2hvd1N1Z2dlc3Rpb25zID09PSBmYWxzZSAmJiB0aGlzLmFsd2F5c1Nob3dMaXN0ID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5zaG93TGlzdENoYW5nZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuc2hvd1N1Z2dlc3Rpb25zID0gdGhpcy5hbHdheXNTaG93TGlzdDtcbiAgICB0aGlzLmZvY3VzZWRPcHRpb24gPSAtMTtcbiAgfVxuXG4gIGhpZ2hsaWdodEl0ZW0oZGlyZWN0aW9uOm51bWJlcik6dm9pZCB7XG4gICAgaWYgKHRoaXMuc2hvd1N1Z2dlc3Rpb25zID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5zaG93SXRlbUxpc3QoKTtcbiAgICB9XG5cbiAgICBsZXQgbWF4ID0gdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxO1xuICAgIGlmIChtYXggPiB0aGlzLm1heFJlc3VsdHMpIHtcbiAgICAgIG1heCA9IHRoaXMubWF4UmVzdWx0cyAtIDE7XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbiA8IDApIHtcbiAgICAgIGlmICh0aGlzLmZvY3VzZWRPcHRpb24gPT09IC0xIHx8IHRoaXMuZm9jdXNlZE9wdGlvbiA9PT0gbWF4KSB7XG4gICAgICAgIHRoaXMuZm9jdXNlZE9wdGlvbiA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZvY3VzZWRPcHRpb24rKztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA+IDApIHtcbiAgICAgIGlmICh0aGlzLmZvY3VzZWRPcHRpb24gPT09IC0xIHx8IHRoaXMuZm9jdXNlZE9wdGlvbiA9PT0gMCkge1xuICAgICAgICB0aGlzLmZvY3VzZWRPcHRpb24gPSBtYXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZvY3VzZWRPcHRpb24tLTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmlyZWQgd2hlbiB0aGUgaW5wdXQgZm9jdXNlZFxuICAgKi9cbiAgb25Gb2N1cyhldmVudDphbnkpOnZvaWQge1xuICAgIHRoaXMuaGFzRm9jdXMgPSB0cnVlO1xuXG4gICAgdGhpcy5nZXRJdGVtcygpO1xuXG4gICAgZXZlbnQgPSB0aGlzLl9yZWZsZWN0TmFtZShldmVudCk7XG5cbiAgICB0aGlzLmF1dG9Gb2N1cy5lbWl0KGV2ZW50KTtcbiAgICB0aGlzLmZvY3VzLmVtaXQoZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW4gdGhlIGlucHV0IGZvY3VzZWRcbiAgICovXG4gIG9uQmx1cihldmVudCk6dm9pZCB7XG4gICAgdGhpcy5oYXNGb2N1cyA9IGZhbHNlO1xuXG4gICAgZXZlbnQgPSB0aGlzLl9yZWZsZWN0TmFtZShldmVudCk7XG5cbiAgICB0aGlzLmF1dG9CbHVyLmVtaXQoZXZlbnQpO1xuICAgIHRoaXMuYmx1ci5lbWl0KGV2ZW50KTtcbiAgfVxuXG4gIF9yZWZsZWN0TmFtZShldmVudDphbnkpOmFueSB7XG4gICAgaWYgKHR5cGVvZiBldmVudC5zcmNFbGVtZW50LmF0dHJpYnV0ZXNbJ25nLXJlZmxlY3QtbmFtZSddID09PSAnb2JqZWN0Jykge1xuICAgICAgZXZlbnQuc3JjRWxlbWVudC5uYW1lID0gZXZlbnQuc3JjRWxlbWVudC5hdHRyaWJ1dGVzWyduZy1yZWZsZWN0LW5hbWUnXS52YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgb25DaGFuZ2VDYWxsYmFja1xuICAgKlxuICAgKiBAcGFyYW0gZm5cbiAgICovXG4gIHB1YmxpYyByZWdpc3Rlck9uQ2hhbmdlKGZuOkZ1bmN0aW9ufGZhbHNlKTp2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sgPSBmbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBvblRvdWNoZWRDYWxsYmFja1xuICAgKlxuICAgKiBAcGFyYW0gZm5cbiAgICovXG4gIHB1YmxpYyByZWdpc3Rlck9uVG91Y2hlZChmbjpGdW5jdGlvbnxmYWxzZSk6dm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjayA9IGZuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbHJlYWR5IHNlbGVjdGVkIHN1Z2dlc3Rpb25zXG4gICAqXG4gICAqIEBwYXJhbSBzdWdnZXN0aW9uc1xuICAgKi9cbiAgcHVibGljIHJlbW92ZUR1cGxpY2F0ZXMoc3VnZ2VzdGlvbnM6YW55W10pOmFueVtdIHtcbiAgICBjb25zdCBzZWxlY3RlZENvdW50ID0gdGhpcy5zZWxlY3RlZCA/IHRoaXMuc2VsZWN0ZWQubGVuZ3RoIDogMDtcblxuICAgIGNvbnN0IHN1Z2dlc3Rpb25Db3VudCA9IHN1Z2dlc3Rpb25zLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0ZWRDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBzZWxlY3RlZExhYmVsID0gdGhpcy5nZXRMYWJlbChcbiAgICAgICAgdGhpcy5zZWxlY3RlZFtpXVxuICAgICAgKTtcblxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzdWdnZXN0aW9uQ291bnQ7IGorKykge1xuICAgICAgICBjb25zdCBzdWdnZXN0ZWRMYWJlbCA9IHRoaXMuZ2V0TGFiZWwoXG4gICAgICAgICAgc3VnZ2VzdGlvbnNbal1cbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoc2VsZWN0ZWRMYWJlbCA9PT0gc3VnZ2VzdGVkTGFiZWwpIHtcbiAgICAgICAgICBzdWdnZXN0aW9ucy5zcGxpY2UoaiwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3VnZ2VzdGlvbnM7XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlRXhjbHVkZWQoc3VnZ2VzdGlvbnM6YW55W10pOmFueVtdIHtcbiAgICBjb25zdCBleGNsdWRlZENvdW50ID0gdGhpcy5leGNsdWRlLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXhjbHVkZWRDb3VudDsgaSsrKSB7XG4gICAgICBsZXQgZXhjbHVkZUxhYmVsID0gdGhpcy5leGNsdWRlW2ldO1xuICAgICAgaWYgKHR5cGVvZiBleGNsdWRlTGFiZWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGV4Y2x1ZGVMYWJlbCA9IHRoaXMuZ2V0TGFiZWwoZXhjbHVkZUxhYmVsKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3VnZ2VzdGlvbkNvdW50ID0gc3VnZ2VzdGlvbnMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN1Z2dlc3Rpb25Db3VudDsgaisrKSB7XG4gICAgICAgIGNvbnN0IHN1Z2dlc3RlZExhYmVsID0gdGhpcy5nZXRMYWJlbChcbiAgICAgICAgICBzdWdnZXN0aW9uc1tqXVxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChleGNsdWRlTGFiZWwgPT09IHN1Z2dlc3RlZExhYmVsKSB7XG4gICAgICAgICAgc3VnZ2VzdGlvbnMuc3BsaWNlKGosIDEpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3VnZ2VzdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGl0ZW0gZnJvbSBzZWxlY3RlZFxuICAgKlxuICAgKiBAcGFyYW0gc2VsZWN0aW9uXG4gICAqIEBwYXJhbSBub3RpZnk/XG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlSXRlbShzZWxlY3Rpb246YW55LCBub3RpZnk/OmJvb2xlYW4pOnZvaWQge1xuICAgIGNvbnN0IGNvdW50ID0gdGhpcy5zZWxlY3RlZCA/IHRoaXMuc2VsZWN0ZWQubGVuZ3RoIDogMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IHRoaXMuc2VsZWN0ZWRbaV07XG5cbiAgICAgIGNvbnN0IHNlbGVjdGVkTGFiZWwgPSB0aGlzLmdldExhYmVsKHNlbGVjdGlvbik7XG4gICAgICBjb25zdCBpdGVtTGFiZWwgPSB0aGlzLmdldExhYmVsKGl0ZW0pO1xuXG4gICAgICBpZiAoc2VsZWN0ZWRMYWJlbCA9PT0gaXRlbUxhYmVsKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQuc3BsaWNlKGksIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIG5vdGlmeSA9IHR5cGVvZiBub3RpZnkgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG5vdGlmeTtcblxuICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgdGhpcy5pdGVtUmVtb3ZlZC5lbWl0KHNlbGVjdGlvbik7XG4gICAgICAgIHRoaXMuaXRlbXNDaGFuZ2UuZW1pdCh0aGlzLnNlbGVjdGVkKTtcbiAgICB9XG5cbiAgICB0aGlzLm1vZGVsQ2hhbmdlLmVtaXQodGhpcy5zZWxlY3RlZCk7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IGl0ZW0gZnJvbSBsaXN0XG4gICAqXG4gICAqIEBwYXJhbSBzZWxlY3Rpb25cbiAgICoqL1xuICBwdWJsaWMgc2VsZWN0SXRlbShzZWxlY3Rpb246YW55KTp2b2lkIHtcbiAgICB0aGlzLmtleXdvcmQgPSB0aGlzLmdldExhYmVsKHNlbGVjdGlvbik7XG4gICAgdGhpcy5mb3JtVmFsdWUgPSB0aGlzLmdldEZvcm1WYWx1ZShzZWxlY3Rpb24pO1xuXG4gICAgdGhpcy51cGRhdGVNb2RlbCh0aGlzLmZvcm1WYWx1ZSk7XG5cbiAgICBpZiAodGhpcy5oaWRlTGlzdE9uU2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLmhpZGVJdGVtTGlzdCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm11bHRpKSB7XG4gICAgICBpZiAodGhpcy5tYXhTZWxlY3RlZCA9PT0gbnVsbCB8fCB0aGlzLnNlbGVjdGVkLmxlbmd0aCA8PSB0aGlzLm1heFNlbGVjdGVkKSB7XG4gICAgICAgIHRoaXMuY2xlYXJWYWx1ZSgpO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQucHVzaChzZWxlY3Rpb24pO1xuICAgICAgICB0aGlzLml0ZW1zQ2hhbmdlLmVtaXQodGhpcy5zZWxlY3RlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuXG4gICAgICB0aGlzLnNlbGVjdGVkID0gW3NlbGVjdGlvbl07XG4gICAgICB0aGlzLml0ZW1zQ2hhbmdlLmVtaXQoc2VsZWN0aW9uKTtcbiAgICB9XG5cbiAgICB0aGlzLml0ZW1TZWxlY3RlZC5lbWl0KHNlbGVjdGlvbik7XG4gICAgdGhpcy5tb2RlbENoYW5nZS5lbWl0KHRoaXMuc2VsZWN0ZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBmb2N1cyBvZiBzZWFyY2hiYXJcbiAgICovXG4gIHB1YmxpYyBzZXRGb2N1cygpOnZvaWQge1xuICAgIGlmICh0aGlzLnVzZUlvbklucHV0ICYmIHRoaXMuaW5wdXRFbGVtKSB7XG4gICAgICB0aGlzLmlucHV0RWxlbS5uYXRpdmVFbGVtZW50LnNldEZvY3VzKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlYXJjaGJhckVsZW0pIHtcbiAgICAgIHRoaXMuc2VhcmNoYmFyRWxlbS5uYXRpdmVFbGVtZW50LnNldEZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBzdWdnZXN0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0gc3VnZ2VzdGlvbnNcbiAgICogQHBhcmFtIHNob3dcbiAgICovXG4gIHB1YmxpYyBzZXRTdWdnZXN0aW9ucyhzdWdnZXN0aW9uczphbnlbXSwgc2hvdz86Ym9vbGVhbik6dm9pZCB7XG4gICAgaWYgKHRoaXMucmVtb3ZlRHVwbGljYXRlU3VnZ2VzdGlvbnMpIHtcbiAgICAgIHN1Z2dlc3Rpb25zID0gdGhpcy5yZW1vdmVEdXBsaWNhdGVzKHN1Z2dlc3Rpb25zKTtcbiAgICAgIHN1Z2dlc3Rpb25zID0gdGhpcy5yZW1vdmVFeGNsdWRlZChzdWdnZXN0aW9ucyk7XG4gICAgfVxuXG4gICAgdGhpcy5zdWdnZXN0aW9ucyA9IHN1Z2dlc3Rpb25zO1xuXG4gICAgaWYgKHNob3cgfHwgdHlwZW9mIHNob3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLnNob3dJdGVtTGlzdCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmF1dG9Gb2N1c1N1Z2dlc3Rpb24pIHtcbiAgICAgIGlmICh0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICB0aGlzLmZvY3VzZWRPcHRpb24gPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgY3VycmVudCBpbnB1dCB2YWx1ZVxuICAgKlxuICAgKiBVc2VkIGV4dGVybmFsbHkgKGllIGRvbid0IGRlbGV0ZSlcbiAgICpcbiAgICogQHBhcmFtIHNlbGVjdGlvblxuICAgKi9cbiAgcHVibGljIHNldFZhbHVlKHNlbGVjdGlvbjogYW55KTp2b2lkIHtcbiAgICB0aGlzLmZvcm1WYWx1ZSA9IHRoaXMuZ2V0Rm9ybVZhbHVlKHNlbGVjdGlvbik7XG4gICAgdGhpcy5rZXl3b3JkID0gdGhpcy5nZXRMYWJlbChzZWxlY3Rpb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IGl0ZW0gbGlzdFxuICAgKi9cbiAgcHVibGljIHNob3dJdGVtTGlzdCgpOnZvaWQge1xuICAgIGlmICh0aGlzLnNob3dTdWdnZXN0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuc2hvd0xpc3RDaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLnNob3dTdWdnZXN0aW9ucyA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBtb2RlbFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZU1vZGVsKGVudGVyZWRUZXh0OnN0cmluZyk6dm9pZCB7XG4gICAgaWYgKGVudGVyZWRUZXh0ICE9PSB0aGlzLmZvcm1WYWx1ZSkge1xuICAgICAgdGhpcy5mb3JtVmFsdWUgPSBlbnRlcmVkVGV4dDtcblxuICAgICAgaWYgKCF0aGlzLm11bHRpKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9uQ2hhbmdlQ2FsbGJhY2spIHtcbiAgICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayh0aGlzLmZvcm1WYWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5tb2RlbENoYW5nZS5lbWl0KHRoaXMuc2VsZWN0ZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIHZhbHVlXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKi9cbiAgcHVibGljIHdyaXRlVmFsdWUodmFsdWU6YW55KTp2b2lkIHtcbiAgICBpZiAodmFsdWUgIT09IHRoaXMuc2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbiA9IHZhbHVlIHx8IG51bGw7XG4gICAgICB0aGlzLmZvcm1WYWx1ZSA9IHRoaXMuZ2V0Rm9ybVZhbHVlKHRoaXMuc2VsZWN0aW9uKTtcbiAgICAgIHRoaXMua2V5d29yZCA9IHRoaXMuZ2V0TGFiZWwodGhpcy5zZWxlY3Rpb24pO1xuICAgIH1cbiAgfVxufVxuIl19